{"version":3,"file":"index.esp.min.js","sources":["../lib/polyfill/buffer/index.js","../src/index.js","../lib/polyfill/array.js","../lib/polyfill/object.js","../helpers/def.js","../helpers/namedFunc.js","../lib/vars.js","../lib/extend.js","../lib/polyfill/console.js","../lib/ndef/dist/index.js"],"sourcesContent":["import Proto from './proto'\r\nimport { toBuffer } from './utils/to'\r\n\r\nconst TYPED_ARRAY_TYPES = [\r\n\tInt8Array, Uint8Array, Uint8ClampedArray,\r\n\tInt16Array, Uint16Array,\r\n\tInt32Array, Uint32Array, Float32Array,\r\n\tFloat64Array\r\n]\r\n\r\nfunction copy(target) {\r\n\tconst targetStart \t= arguments[1] !== undefined ? arguments[1] : 0,\r\n\t\t\t\tsourceStart \t= arguments[2] !== undefined ? arguments[2] : 0,\r\n\t\t\t\tsourceEnd \t\t= arguments[3] !== undefined ? arguments[3] : source.length\r\n\r\n\tlet copied = 0\r\n\r\n\tfor(let sourceIndex = sourceStart, targetIndex = targetStart; sourceIndex < sourceEnd; sourceIndex++, targetIndex++, copied++)\r\n\t\ttarget.set([ this[sourceIndex] ], targetIndex)\r\n\r\n\treturn copied\r\n}\r\n\r\nfunction Buffer() {\r\n\tthrow new Error('Buffer constructor is deprecated. Use Buffer.from() instead.')\r\n}\r\n\r\nBuffer.from = function _createBuffer() {\r\n\tlet iterable = []\r\n\tif(typeof arguments[0] == 'string') {\r\n    for(let c in arguments[0]) {\r\n  \t\titerable[c] = arguments[0].charCodeAt(c)\r\n\t\t\t/*iterable[c] = (arguments[0][c] >= 0x20 && arguments[0][c] <= 0x7F)\r\n\t\t\t\t? arguments[0].charCodeAt(c)\r\n\t\t\t\t: 0x00*/\r\n\t\t}\r\n  } else if(arguments[0] instanceof Array || TYPED_ARRAY_TYPES.some(Proto => arguments[0] instanceof Proto)) {\r\n\t\titerable = arguments[0]\r\n\t}\r\n\r\n\tif('1' in arguments) {\r\n\t\tconst offset = arguments[1] !== undefined ? arguments[1] : 0,\r\n\t\t\t\t\tlength = arguments[2] !== undefined ? arguments[2] : iterable.length,\r\n\t\t\t\t\tarray = []\r\n\r\n\t\tfor(let i = offset;i--;)\r\n\t\t\tarray[i] = 0\r\n\r\n\t\tfor(let i = 0; (i < iterable.length) && (i < length); i++)\r\n\t\t\tarray[offset + i] = iterable[i]\r\n\r\n\t\tfor(let i = array.length; i < length; i++)\r\n\t\t\tarray[i] = 0\r\n\r\n\t\treturn new Proto(array)\r\n\t}\r\n\r\n\treturn new Proto(iterable)\r\n}\r\n\r\nBuffer.concat = function concat() {\r\n\tconst list = arguments[0] || [],\r\n\t\ttotalLength = arguments[1] !== undefined ? arguments[1] : list.reduce((totalLength, array) => (totalLength + array.length), 0)\r\n\r\n\tlet buffer = Buffer.from([], 0, totalLength),\n\t\toffset = 0\r\n\r\n\tlist.forEach(buf => {\r\n\t\tbuffer.set(buf, offset)\r\n\t\toffset += buf.length\r\n\t})\r\n\r\n\treturn buffer\r\n}\r\n\r\nexport default Buffer\r\n","//import Bus from 'bus'\r\n//import { CONSTANTS, cmd } from '../lib/nfc'\r\n\r\nimport series from 'helpers/series'\r\n\r\nimport * as ndef from 'ndef'\r\n\r\nconst encoded = ndef.encodeMessage([\r\n  ndef.textRecord('2enhello world!')\r\n])\r\n\r\nconst decodeIterator = (chunk, next, decoder, index, decoders) => {\r\n  decoder(chunk, res => {\r\n    if(++index < decoders.length) {\r\n      next(res)\r\n    } else {\r\n      next(new Error({\r\n        type: 'DecoderError',\r\n        msg: 'Cannot decode chunk',\r\n        chunk\r\n      }))\r\n    }\r\n  })\r\n}\r\n\r\nfunction _Decoder() {\r\n  this._decoderState = {\r\n    receive: []\r\n  }\r\n}\r\n\r\n_Decoder.prototype = {\r\n  rx(decoder, cb) {\r\n    this.receive.push({\r\n      decoder, cb\r\n    })\r\n  },/*\r\n\r\n  tx(encoder, cb) {\r\n    this.transmit.push({\r\n      encoder, cb\r\n    })\r\n  },*/\r\n\r\n  decode(chunk) {\r\n    return new Promise((done, fail) => {\r\n      series(this._decoderState.receive, (next, decoder, index, decoders) => { decodeIterator(chunk, next, decoder, index, decoders) }, err => {\r\n        this._decoderState.receive.splice(0)\r\n\r\n        if(err) {\r\n          fail(err)\r\n        } else {\r\n          done()\r\n        }\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nconst Decoder = _extend({\r\n  super: [Schedule],\r\n  apply: [_Decoder, Schedule]\r\n})\r\n\r\n\r\n/*\r\nconst ndefRecord = [].concat([\r\n  CONSTANTS.TAG_MEM_NDEF_TLV,\r\n  encoded.length\r\n], encoded, [\r\n  CONSTANTS.TAG_MEM_TERMINATOR_TLV\r\n])\r\n\r\nfunction shrinkToUint8 (values) {\r\n  return values.reduce((sum, value) => {\r\n    sum += value\r\n\r\n    while(sum > 0xff) {\r\n      const remainder = sum & 0xff\r\n      sum = sum >> 8\r\n      sum += remainder - 1\r\n    }\r\n    return sum\r\n  }, 0x00)\r\n}\r\n\r\nfunction LCS_std(byte, length, frame) {\r\n  return 0x00 === shrinkToUint8(frame.slice(-2))\r\n}\r\n\r\nfunction LCS_ext(byte, length, frame) {\r\n  return 0x00 === shrinkToUint8([frame[5] * 256 + frame[6], frame[7]])\r\n}\r\n\r\nfunction CHECKSUM_std(byte, length, frame) {\r\n  return 0x00 === shrinkToUint8(frame.slice(5))\r\n}\r\n\r\nfunction CHECKSUM_ext(byte, length, frame) {\r\n  return 0x00 === shrinkToUint8(frame.slice(8))\r\n}\r\n\r\nfunction BODY_std (frame) {\r\n  const arr = []\r\n  for(let i = 0; i < frame[3] - 1; i ++)\r\n    arr.push(undefined)\r\n  return arr\r\n}\r\n\r\nfunction BODY_ext (frame) {\r\n  const arr = [], length = frame[5] * 256 + frame[6]\r\n  for(let i = 0; i < length - 1; i ++)\r\n    arr.push(undefined)\r\n  return arr\r\n}\r\n\r\nconst INFO_FRAME_std = [\r\n  [0, 0, 0xff, undefined, LCS_std, 0xd5],\r\n  BODY_std,\r\n  [CHECKSUM_std, 0x00]\r\n]\r\n\r\nfunction createResponseNormalFrame (code) {\r\n  return [\r\n    [0, 0, 0xff, undefined, LCS_std, 0xd5, code],\r\n    frame => BODY_std(frame).slice(1),\r\n    [CHECKSUM_std, 0x00]\r\n  ]\r\n}\r\n\r\nconst INFO_FRAME_ext = [\r\n  [0, 0, 0xff, 0xff, 0xff, undefined, undefined, LCS_ext, 0xd5],\r\n  BODY_ext,\r\n  [CHECKSUM_ext, 0x00]\r\n]\r\n\r\nconst ERR_FRAME = [\r\n  [0, 0 , 0xff, 0x01, 0xff, undefined, CHECKSUM_std, 0x00]\r\n]\r\n\r\nconst ACK_FRAME = [\r\n  new Uint8ClampedArray([0, 0, 255, 0, 255, 0])\r\n]\r\n\r\nconst wakeup = new Uint8Array([0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])\r\nconst sam = new Uint8Array(cmd([CONSTANTS.PN532_COMMAND_SAMCONFIGURATION, CONSTANTS.PN532_SAM_NORMAL_MODE, 20, 0]))\r\nconst writeGPIO = new Uint8Array(cmd([CONSTANTS.PN532_COMMAND_WRITEGPIO, 128, 128]))\r\n\r\n\r\nfunction setup(done) {\r\n  Serial1.setup(115200, {\r\n    rx: B7, tx: B6\r\n  })\r\n\r\n  Serial1.write(wakeup)\r\n  Serial1.write(sam)\r\n\r\n  setTimeout(() => {\r\n    Serial1.read()\r\n    Serial1.pipe(this)\r\n  }, 1000)\r\n\r\n  setTimeout(() => {\r\n    blink.once(LED2, 20, () => setTimeout(() => blink.once(LED2, 20), 200))\r\n\r\n    done()\r\n  }, 2000)\r\n}\r\n\r\nconsole.log(process.memory())\r\n\r\nconst bus = new Bus({\r\n  setup, highWaterMark: 32\r\n})\r\n\r\nbus.on('error', console.error)\r\n\r\nbus.setup(Serial1)\r\n/*\r\n\r\nbus.watch(ACK_FRAME, ack => {\r\n  blink.once(LED2)\r\n})\r\n\r\nbus.watch(ERR_FRAME, err => {\r\n  console.error('ERROR', {\r\n    type: 'BusError',\r\n    code: err[5]\r\n  })\r\n\r\n  bus.emit('error', {\r\n    type: 'BusError',\r\n    code: frame[5]\r\n  })\r\n})\r\n\r\nbus.watch(INFO_FRAME_std, frame => {\r\n  console.log('STD', {\r\n    code: frame[6],\r\n    body: frame.slice(7, 5 + frame[3])\r\n  })\r\n})\r\n\r\nbus.watch(INFO_FRAME_ext, frame => {\r\n  console.log('EXT', {\r\n    code: frame[6],\r\n    body: frame.slice(7, 5 + frame[3])\r\n  })\r\n})\r\n\r\nbus.deferred(({ Serial1 }) => {\r\n  const FIRMWARE = new Uint8Array(cmd([\r\n    CONSTANTS.PN532_COMMAND_GETFIRMWAREVERSION,\r\n  ]))\r\n\r\n  Serial1.write(FIRMWARE)\r\n})\r\n\r\n\r\nconst KEY = new Uint8ClampedArray([0xff, 0xff, 0xff, 0xff, 0xff, 0xff])\r\n//let uid = new Uint8ClampedArray([ 0, 189, 157, 124 ])\nvar MIFARE_CMD_AUTH_A = 0x60;\r\nvar MIFARE_CMD_AUTH_B = 0x61;\r\nvar MIFARE_CMD_READ = 0x30;\r\nvar MIFARE_CMD_WRITE_16 = 0xA0;\nconst MIFARE_CMD_WRITE_4 = 0xA2\r\n\r\nlet afi = 0x00\r\n\r\n\r\n/*\r\n;(function poll() {\r\n  let uid,\r\n      block = 4,\r\n      data = null\r\n\r\n  bus.deferred(done => {\r\n    const LIST = cmd([\r\n      CONSTANTS.PN532_COMMAND_INLISTPASSIVETARGET,\r\n      1,\r\n      0\r\n    ])\r\n\r\n    bus.rx(ACK_FRAME, ack => {})\r\n\r\n    bus.rx(INFO_FRAME_std, frame => {\r\n      const body = frame.slice(7, 5 + frame[3]),\r\n            uidLength = body[5],\r\n            _uid = body.slice(6, 6 + uidLength)\r\n\r\n      console.log('LIST', {\r\n        code: frame[6],\r\n        body,\r\n        count: body[0],\r\n        ATQA: body.slice(2, 4), // SENS_RES\r\n        SAK: body[4],\r\n        uidLength,\r\n        uid: _uid\r\n      })\r\n\r\n      uid = _uid\r\n\r\n      done()\r\n    })\r\n\r\n    Serial1.write(LIST)\r\n  })\r\n\r\n  bus.deferred((done, fail) => {\r\n    const AUTH = cmd([\r\n      CONSTANTS.PN532_COMMAND_INDATAEXCHANGE,\r\n      1,\r\n      MIFARE_CMD_AUTH_A,\r\n      block\r\n    ].concat(KEY).concat(uid))\r\n\r\n    bus.rx(ACK_FRAME, ack => {})\r\n\r\n    //bus.rx(ERR_FRAME, fail)\r\n\r\n    bus.rx(INFO_FRAME_std, frame => {\r\n      console.log('AUTH', {\r\n        code: frame[6],\r\n        body: frame.slice(7, 5 + frame[3])\r\n      })\r\n\r\n      done()\r\n    })\r\n\r\n    Serial1.write(AUTH)\r\n  })\r\n\r\n  bus.deferred((done, fail) => {\r\n    const WRITE = cmd([\r\n      CONSTANTS.PN532_COMMAND_INDATAEXCHANGE,\r\n      1,\r\n      CONSTANTS.MIFARE_CMD_WRITE,\r\n      block\r\n    ].concat(encodeMessage))\r\n\r\n    bus.rx(ACK_FRAME, ack => {\r\n      console.log('ACK WRITE')\r\n    })\r\n\r\n    //bus.rx(ERR_FRAME, fail)\r\n\r\n    bus.rx(INFO_FRAME_std, block => {\r\n      console.log(block)\r\n\r\n      done()\r\n    })\r\n\r\n    Serial1.write(WRITE)\r\n  })\r\n\r\n  bus.deferred((done, fail) => {\r\n    const READ = cmd([\r\n      CONSTANTS.PN532_COMMAND_INDATAEXCHANGE,\r\n      1,\r\n      CONSTANTS.MIFARE_CMD_READ,\r\n      block\r\n    ])\r\n\r\n    bus.rx(ACK_FRAME, ack => {})\r\n\r\n    //bus.rx(ERR_FRAME, fail)\r\n\r\n    bus.rx(INFO_FRAME_std, block => {\r\n      // Find NDEF TLV (0x03) in block of data - See NFC Forum Type 2 Tag Operation Section 2.4 (TLV Blocks)\r\n      var ndefValueOffset = null;\r\n      var ndefLength = null;\r\n      var blockOffset = 0;\r\n\r\n      while (ndefValueOffset === null) {\r\n        if (blockOffset >= block.length) {\r\n          throw new Error('Unable to locate NDEF TLV (0x03) byte in block:', block)\r\n        }\r\n\r\n        var type = block[blockOffset];       // Type of TLV\r\n        var length = block[blockOffset + 1] || 0; // Length of TLV\r\n\r\n        if (type === CONSTANTS.TAG_MEM_NDEF_TLV) {\r\n          ndefLength = length;                  // Length proceeds NDEF_TLV type byte\r\n          ndefValueOffset = blockOffset + 2;    // Value (NDEF data) proceeds NDEV_TLV length byte\r\n        } else {\r\n          // Skip TLV (type byte, length byte, plus length of value)\r\n          blockOffset = blockOffset + 2 + length;\r\n        }\r\n      }\r\n\r\n      var ndefData = block.slice(ndefValueOffset, block.length);\r\n      var additionalBlocks = Math.ceil((ndefValueOffset + ndefLength) / 16) - 1;\r\n\r\n      // Sequentially grab each additional 16-byte block (or 4x 4-byte pages) of data, chaining promises\r\n      var self = this;\r\n      var allDataPromise = (function retrieveBlock(blockNum) {\r\n        if (blockNum <= additionalBlocks) {\r\n          var blockAddress = 4 * (blockNum + 1);\r\n\r\n          return self.readBlock({blockAddress: blockAddress})\r\n            .then(function(block) {\r\n              blockNum++;\r\n              ndefData = Buffer.concat([ndefData, block]);\r\n              return retrieveBlock(blockNum);\r\n            });\r\n        }\r\n      })(1);\r\n\r\n      done()\r\n\r\n      allDataPromise.then(() => ndefData.slice(0, ndefLength));\r\n\r\n    })\r\n\r\n    Serial1.write(READ)\r\n  })\r\n\r\n  bus.deferred(done => {\r\n    setTimeout(() => {\r\n      done()\r\n      poll()\r\n    }, 1000)\r\n  })\r\n})()\r\n\r\n\r\n/**/\r\n","Array.prototype.concat = function () {\r\n  const concatenated = []\r\n\r\n  for(let i in this) {\r\n    concatenated.push(this[i])\r\n  }\r\n\r\n  for(let i in arguments) {\r\n    for(let j in arguments[i]) {\r\n      concatenated.push(arguments[i][j])\r\n    }\r\n  }\r\n\r\n  return concatenated\r\n}\r\n\r\nexport default Array\r\n","Object.assign = (target, ...args) => {\r\n  for(let obj of args) {\r\n    if(obj instanceof Object)\r\n      for(let key in obj) {\r\n        target[key] = obj[key]\r\n      }\r\n  }\r\n\r\n  return target\r\n}\r\n\r\nObject.freeze = obj => obj\r\n\r\nexport default Object\r\n","const defProp = (obj, prop, desc) => {\r\n  try {\r\n    Object.defineProperty(obj, prop, desc)\r\n    return obj\r\n  } catch(e) {\r\n    if(desc.get)\r\n      obj.value = desc.get()\r\n    else if(desc.value)\r\n      obj[prop] = desc.value\r\n\r\n    return obj\r\n  }\r\n}\r\n\r\nexport {\r\n  defProp\r\n}\r\n","export default (name, f) => {\r\n  defProp(f, 'name', { value: name })\r\n  //defProp(f, 'toString', { value: () => '[Function' + (f.name !== undefined ? ': ' + f.name : '') + ']' })\r\n\r\n  return f\r\n}\r\n","const SUPER_CHAIN_PROTO_PROP = '_super',\r\n  SUPER_CHAIN_APPLY_PROP = '_apply',\r\n  PROTOTYPE_IS_EXTENDED_PROP = '_isExtended'\r\n\r\nexport {\r\n  SUPER_CHAIN_PROTO_PROP,\r\n  SUPER_CHAIN_APPLY_PROP,\r\n  PROTOTYPE_IS_EXTENDED_PROP\r\n}\r\n","import {\r\n  SUPER_CHAIN_PROTO_PROP,\r\n  SUPER_CHAIN_APPLY_PROP,\r\n  PROTOTYPE_IS_EXTENDED_PROP\r\n} from './vars'\r\n\r\nconst _copyChain = (Extended, ProtoChain, chainPropName, ignoreExtended) => {\r\n  //if chain on [Extended] has not been created yet\r\n  if(!Extended.prototype[chainPropName])\r\n    defProp(Extended.prototype, chainPropName, { value: [] })\r\n\r\n  ProtoChain.forEach(Proto => {\r\n    //console.log(!!Proto.prototype['__extended__'], Proto)\r\n    //if [Proto] has been '__extended__' and has same-named proto chain, copy the Proto chain to Extended chain\r\n    const isExtended = !!Proto.prototype[PROTOTYPE_IS_EXTENDED_PROP],\r\n      hasSameChain = !!Proto.prototype[chainPropName]\r\n\r\n    const alreadyInChain = Extended.prototype[chainPropName].some(P => (P === Proto)),\r\n      shouldBePushed = (!isExtended || !ignoreExtended) && !alreadyInChain,\r\n      shouldCopyChain = isExtended && hasSameChain\r\n\r\n    if(shouldCopyChain)\r\n      Proto.prototype[chainPropName].forEach(Proto => {\r\n        //avoid pushing twice\r\n        if(!Extended.prototype[chainPropName].some(P => (P === Proto)) ) {\r\n          //console.log('pushed', Proto)\r\n          Extended.prototype[chainPropName].push(Proto)\r\n        }\r\n      })\r\n\r\n    if(shouldBePushed)\r\n      Extended.prototype[chainPropName].push(Proto)\r\n  })\r\n\r\n  //console.log(Extended.prototype[chainPropName])\r\n}\r\n\r\nconst _extend = (options = {}) => {\r\n  if(!options.apply)\r\n    options.apply = []\r\n  if(!options.super)\r\n    options.super = []\r\n  if(!options.static)\r\n    options.static = []\r\n\r\n  const Child = options.super[0]\r\n\r\n  if(!options.name)\r\n    options.name = Child.name\r\n\r\n  function Extended() {\r\n    Extended.prototype[SUPER_CHAIN_APPLY_PROP].forEach(Super => {\r\n      if(Super !== Extended) {\r\n        Super.apply(this, arguments)\r\n      }\r\n    })\r\n  }\r\n\r\n  _named(options.name, Extended)\r\n\r\n  for(let i in options.static) {\r\n    for(let prop in options.static[i]) {\r\n      if('prototype' != prop) {\r\n        defProp(Extended, prop, {\r\n          value: proto[prop],\r\n          enumerable: true,\r\n          writable: true\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  defProp(Extended, 'prototype', { value: {} })\r\n  defProp(Extended.prototype, 'constructor', { value: Child })\r\n  defProp(Extended.prototype, PROTOTYPE_IS_EXTENDED_PROP, { value: true })\r\n\r\n  for(let i in options.super) {\r\n    function Proto() {}\r\n    Proto.prototype = options.super[i].prototype\r\n    const proto = new Proto()\r\n\r\n    for(let prop in proto) {\r\n      if(['constructor', PROTOTYPE_IS_EXTENDED_PROP, SUPER_CHAIN_PROTO_PROP, SUPER_CHAIN_APPLY_PROP].indexOf(prop) < 0) {\r\n        defProp(Extended.prototype, prop, {\r\n          value: proto[prop],\r\n          enumerable: true,\r\n          writable: true\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  _copyChain(Extended, options.super, SUPER_CHAIN_PROTO_PROP, false)\r\n  _copyChain(Extended, options.apply, SUPER_CHAIN_APPLY_PROP, true)\r\n\r\n  return Extended\r\n}\r\n\r\nconst extend = (...args) => _extend({ super: args.slice(1), apply: args })\r\n\r\nexport { extend, _extend, _copyChain }\r\n","const timers = {}\r\n\r\nfunction time(label) {\r\n  timers[label] = Date.now()\r\n}\r\n\r\nfunction timeEnd(label) {\r\n  if(label in timers) {\r\n    console.log(`${ label }: ${ (Date.now() - timers[label]).toFixed(3) }ms`)\r\n    delete timers[label]\r\n  }\r\n}\r\n\r\nif(typeof console.time !== 'function') {\r\n  console.time = time\r\n  console.timeEnd = timeEnd\r\n}\r\n\r\nif(typeof console.error !== 'function') {\r\n  console.error = console.log\r\n}\r\n\r\nexport default console\r\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar data = { TNF_EMPTY: 0,\n  TNF_WELL_KNOWN: 1,\n  TNF_MIME_MEDIA: 2,\n  TNF_ABSOLUTE_URI: 3,\n  TNF_EXTERNAL_TYPE: 4,\n  TNF_UNKNOWN: 5,\n  TNF_UNCHANGED: 6,\n  TNF_RESERVED: 7,\n  RTD_TEXT: \"T\",\n  RTD_URI: \"U\",\n  RTD_SMART_POSTER: \"Sp\",\n  RTD_ALTERNATIVE_CARRIER: \"ac\",\n  RTD_HANDOVER_CARRIER: \"Hc\",\n  RTD_HANDOVER_REQUEST: \"Hr\",\n  RTD_HANDOVER_SELECT: \"Hs\",\n  BLOCK_SIZE: 16,\n  TLV_START: 64,\n  TL_LENGTH: 4 };\n\n// ndef-util.js\n// Copyright 2013 Don Coleman\n//\n\n// This is from phonegap-nfc.js and is a combination of helpers in nfc and util\n// https://github.com/chariotsolutions/phonegap-nfc/blob/master/www/phonegap-nfc.js\n\nvar stringToBytes = function stringToBytes(string) {\n    return Buffer.from(string);\n};\n\nfunction bytesToString(bytes) {\n    return Buffer.from(bytes).toString();\n}\n\n/**\n  * decode text bytes from ndef record payload\n  *\n  * @returns a string\n  */\nvar decode = function decode(data) {\n  var languageCodeLength = data[0] & 0x3F,\n      // 6 LSBs\n  languageCode = data.slice(1, 1 + languageCodeLength); // assuming UTF-16BE\n\n  // TODO need to deal with UTF in the future\n  // console.log(\"lang \" + languageCode + (utf16 ? \" utf16\" : \" utf8\"))\n\n  return bytesToString(data.slice(languageCodeLength + 1));\n};\n\n/**\n  * Encode text payload\n  *\n  * @returns an array of bytes\n  */\nvar encode = function encode(text, lang, encoding) {\n  // ISO/IANA language code, but we're not enforcing\n  if (!lang) {\n    lang = 'en';\n  }\n\n  var encoded = stringToBytes(lang.length + lang + text);\n\n  return encoded;\n};\n\n// URI identifier codes from URI Record Type Definition NFCForum-TS-RTD_URI_1.0 2006-07-24\n// index in array matches code in the spec\nvar protocols = [\"\", \"http://www.\", \"https://www.\", \"http://\", \"https://\", \"tel:\", \"mailto:\", \"ftp://anonymous:anonymous@\", \"ftp://ftp.\", \"ftps://\", \"sftp://\", \"smb://\", \"nfs://\", \"ftp://\", \"dav://\", \"news:\", \"telnet://\", \"imap:\", \"rtsp://\", \"urn:\", \"pop:\", \"sip:\", \"sips:\", \"tftp:\", \"btspp://\", \"btl2cap://\", \"btgoep://\", \"tcpobex://\", \"irdaobex://\", \"file://\", \"urn:epc:id:\", \"urn:epc:tag:\", \"urn:epc:pat:\", \"urn:epc:raw:\", \"urn:epc:\", \"urn:nfc:\"];\n\n/**\n  * @returns a string\n  */\nvar decode$1 = function decode(data) {\n  var prefix = protocols[data[0]];\n  if (!prefix) {\n    // 36 to 255 should be \"\"\n    prefix = \"\";\n  }\n  return prefix + bytesToString(data.slice(1));\n};\n\n/**\n  * shorten a URI with standard prefix\n  *\n  * @returns an array of bytes\n  */\nvar encode$1 = function encode(uri) {\n  var prefix, protocolCode, encoded;\n\n  // check each protocol, unless we've found a match\n  // \"urn:\" is the one exception where we need to keep checking\n  // slice so we don't check \"\"\n  protocols.slice(1).forEach(function (protocol) {\n    if ((!prefix || prefix === \"urn:\") && uri.indexOf(protocol) === 0) {\n      prefix = protocol;\n    }\n  });\n\n  if (!prefix) {\n    prefix = \"\";\n  }\n\n  encoded = stringToBytes(uri.slice(prefix.length));\n  protocolCode = protocols.indexOf(prefix);\n  // prepend protocol code\n  encoded.unshift(protocolCode);\n\n  return encoded;\n};\n\n// ndef.js\n// Copyright 2013 Don Coleman\n//\n// This code is from phonegap-nfc.js https://github.com/don/phonegap-nfc\n\n// see android.nfc.NdefRecord for documentation about constants\n// http://developer.android.com/reference/android/nfc/NdefRecord.html\n\n/**\n * Creates a JSON representation of a NDEF Record.\n *\n * @tnf 3-bit TNF (Type Name Format) - use one of the CONSTANTS.TNF_* constants\n * @type byte array, containing zero to 255 bytes, must not be null\n * @id byte array, containing zero to 255 bytes, must not be null\n * @payload byte array, containing zero to (2 ** 32 - 1) bytes, must not be null\n *\n * @returns JSON representation of a NDEF record\n *\n * @see Ndef.textRecord, Ndef.uriRecord and Ndef.mimeMediaRecord for examples\n */\n\n// convert bytes to a String\nvar s = function s(bytes) {\n  return Buffer.from(bytes).toString();\n};\n\nvar record = function record() {\n  var tnf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : data.TNF_EMPTY;\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var payload = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var value = arguments[4];\n\n  // store type as String so it's easier to compare\n  if (type instanceof Array) {\n    type = bytesToString(type);\n  }\n\n  // in the future, id could be a String\n  if (!(id instanceof Array)) {\n    id = stringToBytes(id);\n  }\n\n  // Payload must be binary\n  if (!(payload instanceof Array)) {\n    payload = stringToBytes(payload);\n  }\n\n  // Experimental feature\n  // Convert payload to text for Text and URI records\n  if (tnf == data.TNF_WELL_KNOWN) {\n    if (type == data.RTD_TEXT) {\n      value = decode(payload);\n    } else if (type == data.RTD_URI) {\n      value = decode$1(payload);\n    }\n  }\n\n  return {\n    tnf: tnf,\n    type: type,\n    id: id,\n    payload: payload,\n    value: value\n  };\n};\n\n/**\n * Helper that creates an NDEF record containing plain text.\n *\n * @text String of text to encode\n * @languageCode ISO/IANA language code. Examples: “fi”, “en-US”, “fr-CA”, “jp”. (optional)\n * @id byte[] (optional)\n */\nvar textRecord = function textRecord(text, languageCode) {\n  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return record(data.TNF_WELL_KNOWN, data.RTD_TEXT, id, encode(text, languageCode));\n};\n/**\n * Helper that creates a NDEF record containing a URI.\n *\n * @uri String\n * @id byte[] (optional)\n */\nvar uriRecord = function uriRecord(uri) {\n  var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return record(data.TNF_WELL_KNOWN, data.RTD_URI, id, encode$1(uri));\n};\n\n/**\n * Helper that creates a NDEF record containing an absolute URI.\n *\n * An Absolute URI record means the URI describes the payload of the record.\n *\n * For example a SOAP message could use \"http://schemas.xmlsoap.org/soap/envelope/\"\n * as the type and XML content for the payload.\n *\n * Absolute URI can also be used to write LaunchApp records for Windows.\n *\n * See 2.4.2 Payload Type of the NDEF Specification\n * http://www.nfc-forum.org/specs/spec_list#ndefts\n *\n * Note that by default, Android will open the URI defined in the type\n * field of an Absolute URI record (TNF=3) and ignore the payload.\n * BlackBerry and Windows do not open the browser for TNF=3.\n *\n * To write a URI as the payload use ndef.uriRecord(uri)\n *\n * @uri String\n * @payload byte[] or String\n * @id byte[] (optional)\n */\nvar absoluteUriRecord = function absoluteUriRecord(uri) {\n  var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return record(data.TNF_ABSOLUTE_URI, uri, id, payload);\n};\n\n/**\n* Helper that creates a NDEF record containing an mimeMediaRecord.\n*\n* @mimeType String\n* @payload byte[]\n* @id byte[] (optional)\n*/\nvar mimeMediaRecord = function mimeMediaRecord(mimeType) {\n  var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return record(data.TNF_MIME_MEDIA, mimeType, id, payload);\n};\n\n/**\n* Helper that creates an NDEF record containing an Smart Poster.\n*\n* @ndefRecords array of NDEF Records\n* @id byte[] (optional)\n*/\nvar smartPoster = function smartPoster(ndefRecords, id, payload) {\n  payload = [];\n\n  if (ndefRecords) {\n    // make sure we have an array of something like NDEF records before encoding\n    if (ndefRecords[0] instanceof Object && ndefRecords[0].hasOwnProperty('tnf')) {\n      payload = encodeMessage(ndefRecords);\n    } else {\n      // assume the caller has already encoded the NDEF records into a byte array\n      payload = ndefRecords;\n    }\n  } else {\n    console.warn(\"WARNING: Expecting an array of NDEF records\");\n  }\n\n  return record(data.TNF_WELL_KNOWN, data.RTD_SMART_POSTER, id, payload);\n};\n\n/**\n* Helper that creates an empty NDEF record.\n*\n*/\nvar emptyRecord = function emptyRecord() {\n  return record(data.TNF_EMPTY, [], [], []);\n};\n\n/**\n* Helper that creates an Android Application Record (AAR).\n* http://developer.android.com/guide/topics/connectivity/nfc/nfc.html#aar\n*\n*/\nvar androidApplicationRecord = function androidApplicationRecord(packageName) {\n  return record(data.TNF_EXTERNAL_TYPE, 'android.com:pkg', [], packageName);\n};\n\n/**\n* Encodes an NDEF Message into bytes that can be written to a NFC tag.\n*\n* @ndefRecords an Array of NDEF Records\n*\n* @returns byte array\n*\n* @see NFC Data Exchange Format (NDEF) http://www.nfc-forum.org/specs/spec_list/\n*/\nvar encodeMessage = function encodeMessage(ndefRecords) {\n  var encoded = [],\n      tnf_byte = void 0,\n      record_type = void 0,\n      payload_length = void 0,\n      id_length = void 0,\n      i = void 0,\n      mb = void 0,\n      me = void 0,\n      // messageBegin, messageEnd\n  cf = false,\n      // chunkFlag TODO implement\n  sr = void 0,\n      // boolean shortRecord\n  il = void 0; // boolean idLengthFieldIsPresent\n\n  for (i = 0; i < ndefRecords.length; i++) {\n    mb = i === 0;\n    me = i === ndefRecords.length - 1;\n    sr = ndefRecords[i].payload.length < 0xFF;\n    il = ndefRecords[i].id.length > 0;\n    tnf_byte = encodeTnf(mb, me, cf, sr, il, ndefRecords[i].tnf);\n    encoded.push(tnf_byte);\n\n    // type is stored as String, converting to bytes for storage\n    record_type = stringToBytes(ndefRecords[i].type);\n    encoded.push(record_type.length);\n\n    if (sr) {\n      payload_length = ndefRecords[i].payload.length;\n      encoded.push(payload_length);\n    } else {\n      payload_length = ndefRecords[i].payload.length;\n      // 4 bytes\n      encoded.push(payload_length >> 24);\n      encoded.push(payload_length >> 16);\n      encoded.push(payload_length >> 8);\n      encoded.push(payload_length & 0xFF);\n    }\n\n    if (il) {\n      id_length = ndefRecords[i].id.length;\n      encoded.push(id_length);\n    }\n\n    encoded = encoded.concat(record_type);\n\n    if (il) {\n      encoded = encoded.concat(ndefRecords[i].id);\n    }\n\n    encoded = encoded.concat(ndefRecords[i].payload);\n  }\n\n  return encoded;\n};\n\n/**\n* Decodes an array bytes into an NDEF Message\n*\n* @bytes an array bytes read from a NFC tag\n*\n* @returns array of NDEF Records\n*\n* @see NFC Data Exchange Format (NDEF) http://www.nfc-forum.org/specs/spec_list/\n*/\nvar decodeMessage = function decodeMessage(_bytes) {\n  var bytes = _bytes.slice(0),\n      // clone since parsing is destructive\n  ndef_message = [],\n      tnf_byte = void 0,\n      header = void 0,\n      type_length = 0,\n      payload_length = 0,\n      id_length = 0,\n      record_type = [],\n      id = [],\n      payload = [];\n\n  while (bytes.length) {\n    tnf_byte = bytes.shift();\n    header = decodeTnf(tnf_byte);\n\n    type_length = bytes.shift();\n\n    if (header.sr) {\n      payload_length = bytes.shift();\n    } else {\n      // next 4 bytes are length\n      payload_length = (0xFF & bytes.shift()) << 24 | (0xFF & bytes.shift()) << 16 | (0xFF & bytes.shift()) << 8 | 0xFF & bytes.shift();\n    }\n\n    if (header.il) {\n      id_length = bytes.shift();\n    }\n\n    record_type = bytes.splice(0, type_length);\n    id = bytes.splice(0, id_length);\n    payload = bytes.splice(0, payload_length);\n\n    ndef_message.push(record(header.tnf, record_type, id, payload));\n\n    if (header.me) break; // last message\n  }\n\n  return ndef_message;\n};\n\n/**\n* Decode the bit flags from a TNF Byte.\n*\n* @returns object with decoded data\n*\n*  See NFC Data Exchange Format (NDEF) Specification Section 3.2 RecordLayout\n*/\nvar decodeTnf = function decodeTnf(tnf_byte) {\n  return {\n    mb: (tnf_byte & 0x80) !== 0,\n    me: (tnf_byte & 0x40) !== 0,\n    cf: (tnf_byte & 0x20) !== 0,\n    sr: (tnf_byte & 0x10) !== 0,\n    il: (tnf_byte & 0x8) !== 0,\n    tnf: tnf_byte & 0x7\n  };\n};\n\n/**\n* Encode NDEF bit flags into a TNF Byte.\n*\n* @returns tnf byte\n*\n*  See NFC Data Exchange Format (NDEF) Specification Section 3.2 RecordLayout\n*/\nvar encodeTnf = function encodeTnf(mb, me, cf, sr, il, tnf) {\n  var value = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : tnf;\n\n  if (mb) {\n    value = value | 0x80;\n  }\n\n  if (me) {\n    value = value | 0x40;\n  }\n\n  // note if cf: me, mb, li must be false and tnf must be 0x6\n  if (cf) {\n    value = value | 0x20;\n  }\n\n  if (sr) {\n    value = value | 0x10;\n  }\n\n  if (il) {\n    value = value | 0x8;\n  }\n\n  return value;\n};\n\n// TODO test with byte[] and string\nvar isType = function isType(record, tnf, type) {\n  return record.tnf === tnf ? s(record) === s(type) : false;\n};\n\nexports.record = record;\nexports.textRecord = textRecord;\nexports.uriRecord = uriRecord;\nexports.absoluteUriRecord = absoluteUriRecord;\nexports.mimeMediaRecord = mimeMediaRecord;\nexports.smartPoster = smartPoster;\nexports.emptyRecord = emptyRecord;\nexports.androidApplicationRecord = androidApplicationRecord;\nexports.encodeMessage = encodeMessage;\nexports.decodeMessage = decodeMessage;\nexports.decodeTnf = decodeTnf;\nexports.encodeTnf = encodeTnf;\nexports.isType = isType;\n"],"names":["Buffer","Error","_Decoder","_decoderState","Array","prototype","concat","concatenated","i","this","push","arguments","j","Object","assign","target","args","obj","key","freeze","defProp","prop","desc","defineProperty","e","get","value","name","f","SUPER_CHAIN_PROTO_PROP","SUPER_CHAIN_APPLY_PROP","PROTOTYPE_IS_EXTENDED_PROP","_copyChain","Extended","ProtoChain","chainPropName","ignoreExtended","forEach","isExtended","Proto","hasSameChain","alreadyInChain","some","P","shouldBePushed","timers","console","time","label","Date","now","timeEnd","log","toFixed","error","TYPED_ARRAY_TYPES","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","from","iterable","c","charCodeAt","_arguments","offset","undefined","length","array","list","totalLength","reduce","buffer","set","buf","bytesToString","bytes","toString","exports","data","TNF_EMPTY","stringToBytes","string","decode","languageCodeLength","slice","encode","text","lang","encoding","protocols","decode$1","prefix","encode$1","uri","protocolCode","encoded","protocol","indexOf","unshift","s","record","tnf","type","id","payload","TNF_WELL_KNOWN","RTD_TEXT","RTD_URI","encodeMessage","ndefRecords","tnf_byte","record_type","payload_length","id_length","mb","me","encodeTnf","sr","il","decodeTnf","cf","languageCode","TNF_ABSOLUTE_URI","mimeType","TNF_MIME_MEDIA","hasOwnProperty","warn","RTD_SMART_POSTER","packageName","TNF_EXTERNAL_TYPE","_bytes","header","type_length","shift","splice","ndef_message","decodeIterator","ndef","chunk","next","decoder","index","decoders","res","cb","receive","Promise","done","fail","_this","err","Super","apply","options","super","static","Child","proto","_extend","Schedule"],"mappings":"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"}